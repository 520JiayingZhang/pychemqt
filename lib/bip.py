#!/usr/bin/python3
# -*- coding: utf-8 -*-

'''Pychemqt, Chemical Engineering Process simulator
Copyright (C) 2009-2017, Juan José Gómez Romera <jjgomera@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.'''



#SRK=[[2, 46, 0.031899999999999998], [2, 48, 0.029999999999999999], [2, 49, 0.097299999999999998], [2, 50, 0.085000000000000006], [2, 98, 0.0252], [3, 46, 0.038800000000000001], [3, 49, 0.1346], [3, 50, 0.082900000000000001], [4, 46, 0.080699999999999994], [4, 48, 0.02], [4, 49, 0.1018], [4, 50, 0.083099999999999993], [5, 46, 0.13569999999999999], [5, 49, 0.1358], [5, 50, 0.052299999999999999], [6, 11, -0.00040000000000000002], [6, 46, 0.1007], [6, 49, 0.1474], [6, 50, 0.060900000000000003], [7, 49, 0.12620000000000001], [8, 49, 0.1278], [8, 50, 0.069699999999999998], [10, 46, 0.1444], [11, 49, 0.11360000000000001], [11, 50, 0.073700000000000002], [12, 48, 0.10000000000000001], [13, 50, 0.054199999999999998], [14, 46, 0.1293], [14, 49, 0.13769999999999999], [14, 50, 0.046399999999999997], [38, 49, 0.1087], [40, 46, 0.21310000000000001], [40, 48, -0.01], [40, 49, 0.081000000000000003], [46, 48, 0.045999999999999999], [46, 49, -0.021999999999999999], [46, 50, 0.14000000000000001], [47, 98, 0.0178], [48, 49, -0.064000000000000001], [48, 50, 0.036700000000000003], [49, 50, 0.10199999999999999], [63, 98, -0.22]]

srk=[
    [1,46,0.009],
    [1,48,0.004],
    [1,49,-0.046],
    [1,2,0.002],
    [2,50,0.091],
    [2,46,0.04],
    [2,48,0.015],
    [2,49,0.097],
    [46,50,0.148],
    [46,48,0.011],
    [46,49,-0.046],
    [48,49,-0.082],
    [48,50,0.07],
    [49,50,0.109],
    [3,50,0.085],
    [3,46,0.02],
    [3,49,0.132],
    [3,1,0.032],
    [3,2,0.003],
    [4,50,0.087],
    [4,46,0.086],
    [4,48,0.04],
    [4,49,0.13],
    [4,1,0.032],
    [4,2,0.003],
    [6,50,0.056],
    [6,46,0.060],
    [6,49,0.134],
    [6,1,0.194],
    [5,50,0.055],
    [5,46,0.085],
    [5,49,0.129],
    [8,50,0.066],
    [8,46,0.092],
    [8,49,0.145],
    [8,1,0.202],
    [8,2,0.018],
    [7,50,0.08],
    [7,46,0.107],
    [7,49,0.137],
    [9,50,0.042],
    [9,49,0.111],
    [10,50,0.068],
    [10,46,0.155],
    [10,49,0.117],
    [10,1,0.211],
    [10,2,0.026],
    [11,50,0.019],
    [11,49,0.121],
    [11,1,0.505],
    [11,2,0.015],
    [12,48,0.19],
    [12,49,0.123],
    [12,1,1],
    [12,2,0.054],
    [1,82,0.634],
    [13,50,0.054],
    [13,49,0.099],
    [14,50,0.003],
    [14,46,0.124],
    [14,48,0.629],
    [14,49,0.134],
    [1,14,0.853],
    [2,14,0.042],
    [20,48,0.256],
    [20,49,0.147],
    [1,20,0.044],
    [2,20,0.033],
    [90,49,0.106],
    [1, 90,-0.041],
    [49, 258,0.11],
    [36,49,0.136],
    [38,50,0.079],
    [38,49,0.083],
    [1,38,0.361],
    [2, 38,0.036],
    [39,50,0.078],
    [39,46,0.09],
    [39,49,0.103],
    [1, 39,0.604],
    [50, 60, 0.055],
    [46, 60,0.092],
    [49, 60,0.096],
    [2, 60,0.002],
    [50, 184,0.036],
    [50, 366,0.042],
    [22,46,0.044],
    [22,49,0.057],
    [1, 22,0.076],
    [23,46,0.085],
    [23,49,0.069],
    [1, 23,0.178],
    [24,49,0.061],
    [40,50,0.009],
    [40,46,0.170],
    [40,48,0.072],
    [40,49,0.096],
    [1, 40,0.530],
    [2, 40,0.039],
    [41,50,0.014],
    [41,46,0.219],
    [41,49,0.096],
    [2, 41,0.061],
    [43,50,0.022],
    [43,46,0.230],
    [43,49,0.076],
    [1, 43,0.906],
    [2, 43,0.042],
    [44,49,0.096],
    [45,49,0.126],
    [49, 178,0.067],
    [49, 70,0.070],
    [49, 71,0.090],
    [49, 183,0.090],
    [49, 76,0.076],
    [46, 77,0.225],
    [49, 77,0.058],
    [2, 77,0.044],
    [1, 884,0.327],
    [1, 382,0.610],
    [49, 406,0.134],
    [1, 406,0.767],
    [2, 406,0.114],
    [49, 191,0.116],
    [1, 191,0.740],
    [2, 191,0.088],
    [46, 376,0.304],
    [49, 376,0.155],
    [1, 376,0.898],
    [2, 376,0.171],
    [49, 200,0.230],
    [1, 200,1.000],
    [2, 200, 0.253],
    [6,117,0.2015],
    [6,134,0.0709],
    [6,456,0.0183],
    [5,117,0.2411],
    [8,117,0.1746],
    [7,456,0.0163],
    [10,117,0.0932],
    [10,456,0.0183],
    [55,117,0.0777],
    [52,117,0.1432],
    [53,117,0.1144],
    [11,134,0.0759],
    [11,337,0.0077],
    [12,117,0.0786],
    [12,134,0.0960],
    [12,456,0.0172],
    [82,117,0.0616],
    [82,134,0.0399],
    [82,456,0.0236],
    [13,134,0.0863],
    [15,134,0.0356],
    [37,117,0.0980],
    [37,134,0.0852],
    [38,117,0.1374],
    [38,134,0.11],
    [38,337,-0.0112],
    [39,117,0.0716],
    [39,134,0.0774],
    [39,456,0.0293],
    [24,456,0.001],
    [27,456,-0.0169],
    [35,117,0.0759],
    [56,117,0.0707],
    [56,456,-0.0008],
    [83,117,0.0675],
    [325,117,0.1122],
    [28,456,-0.0052],
    [40,117,0.1147],
    [40,134,0.1108],
    [40,456,-0.0099],
    [40,337,-0.0110],
    [41,117,0.1330],
    [41,134,0.1145],
    [41,456,-0.0009],
    [41,337,-0.0110],
    [44,134,0.1413],
    [43,117,0.0997],
    [45,117,0.0976],
    [45,134,0.1284],
    [45,337,-0.0088],
    [117,456,-0.034]]

pr = [[1, 2, 0.015599999999999999], [1, 3, -0.066699999999999995], [1, 4, -0.083299999999999999], [1, 5, -0.5], [1, 6, -0.39700000000000002], [1, 7, -0.5], [1, 8, -0.5], [1, 10, -0.029999999999999999], [1, 11, -0.1167], [1, 12, -0.5], [1, 13, -0.5], [1, 14, -0.5], [1, 22, 0.0074000000000000003], [1, 23, -0.1037], [1, 38, -0.5], [1, 40, -0.5], [1, 41, -0.5], [1, 46, 0.10299999999999999], [1, 48, 0.091899999999999996], [1, 49, -0.16220000000000001], [1, 50, 0.10000000000000001], [1, 63, -0.183], [2, 3, -0.0025999999999999999], [2, 4, 0.014], [2, 5, 0.025600000000000001], [2, 6, 0.013299999999999999], [2, 7, -0.0055999999999999999], [2, 8, 0.023], [2, 9, 0.029999999999999999], [2, 10, 0.042200000000000001], [2, 11, 0.035200000000000002], [2, 12, 0.049599999999999998], [2, 13, 0.047399999999999998], [2, 14, 0.042200000000000001], [2, 22, 0.021499999999999998], [2, 23, 0.033000000000000002], [2, 38, 0.035000000000000003], [2, 40, 0.036299999999999999], [2, 41, 0.040000000000000001], [2, 46, 0.031099999999999999], [2, 48, 0.029999999999999999], [2, 49, 0.091899999999999996], [2, 50, 0.085000000000000006], [2, 51, 0.1356], [2, 62, 0.5], [2, 63, 0.17999999999999999], [2, 98, 0.023], [3, 4, 0.0011000000000000001], [3, 5, -0.0067000000000000002], [3, 6, 0.0095999999999999992], [3, 8, 0.0077999999999999996], [3, 10, -0.01], [3, 11, 0.0067000000000000002], [3, 12, 0.018499999999999999], [3, 14, 0.0144], [3, 22, 0.0088999999999999999], [3, 23, 0.0088999999999999999], [3, 35, 0.017999999999999999], [3, 38, 0.02], [3, 40, 0.032199999999999999], [3, 41, 0.02], [3, 46, 0.051499999999999997], [3, 48, -0.022599999999999999], [3, 49, 0.13220000000000001], [3, 50, 0.083299999999999999], [3, 62, 0.5], [3, 63, 0.20000000000000001], [4, 5, -0.0077999999999999996], [4, 6, 0.0033], [4, 7, 0.0111], [4, 8, 0.026700000000000002], [4, 10, 0.00069999999999999999], [4, 11, 0.0055999999999999999], [4, 23, 0.0074000000000000003], [4, 38, 0.02], [4, 40, 0.023300000000000001], [4, 41, 0.02], [4, 46, 0.085199999999999998], [4, 48, 0.025899999999999999], [4, 49, 0.1241], [4, 50, 0.087800000000000003], [4, 62, 0.47999999999999998], [4, 63, 0.20000000000000001], [5, 6, -0.00040000000000000002], [5, 23, -0.0144], [5, 46, 0.1033], [5, 48, 0.040000000000000001], [5, 49, 0.12], [5, 50, 0.047399999999999998], [5, 62, 0.47999999999999998], [5, 63, 0.20000000000000001], [6, 8, 0.017399999999999999], [6, 10, -0.0055999999999999999], [6, 11, 0.0033], [6, 14, 0.0077999999999999996], [6, 22, 0.092200000000000004], [6, 46, 0.080000000000000002], [6, 48, 0.040000000000000001], [6, 49, 0.1333], [6, 50, 0.065000000000000002], [6, 62, 0.47999999999999998], [6, 63, 0.20000000000000001], [7, 8, 0.059999999999999998], [7, 46, 0.092200000000000004], [7, 48, 0.040000000000000001], [7, 49, 0.12189999999999999], [7, 50, 0.059999999999999998], [7, 62, 0.47999999999999998], [7, 63, 0.20000000000000001], [8, 11, 0.0074000000000000003], [8, 40, 0.017399999999999999], [8, 46, 0.10000000000000001], [8, 48, 0.040000000000000001], [8, 49, 0.1222], [8, 50, 0.063], [8, 62, 0.47999999999999998], [8, 63, 0.20000000000000001], [9, 46, 0.095000000000000001], [9, 49, 0.125], [9, 50, 0.059999999999999998], [10, 11, -0.0077999999999999996], [10, 40, 0.0092999999999999992], [10, 46, 0.14960000000000001], [10, 48, 0.040000000000000001], [10, 49, 0.11], [10, 50, 0.057000000000000002], [10, 62, 0.47999999999999998], [10, 63, 0.20000000000000001], [11, 22, 0.0144], [11, 40, 0.0011000000000000001], [11, 46, 0.14410000000000001], [11, 48, 0.040000000000000001], [11, 49, 0.10000000000000001], [11, 50, 0.055], [11, 62, 0.47999999999999998], [11, 63, 0.20000000000000001], [12, 40, 0.0030000000000000001], [12, 46, 0.10000000000000001], [12, 48, 0.040000000000000001], [12, 49, 0.11], [12, 50, 0.050000000000000003], [12, 62, 0.47999999999999998], [12, 63, 0.20000000000000001], [13, 46, 0.10000000000000001], [13, 48, 0.040000000000000001], [13, 49, 0.11], [13, 50, 0.050000000000000003], [13, 62, 0.47999999999999998], [13, 63, 0.20000000000000001], [14, 22, 0.0253], [14, 38, 0.01], [14, 40, 0.01], [14, 41, 0.01], [14, 46, 0.1293], [14, 48, 0.040000000000000001], [14, 49, 0.11409999999999999], [14, 50, 0.044999999999999998], [14, 62, 0.47999999999999998], [14, 63, 0.20000000000000001], [22, 40, 0.031099999999999999], [22, 46, 0.085599999999999996], [22, 49, 0.055199999999999999], [22, 65, 0.065199999999999994], [23, 24, -0.001], [23, 46, 0.089999999999999997], [23, 49, 0.093299999999999994], [23, 65, -0.42999999999999999], [38, 46, 0.10000000000000001], [38, 48, 0.10000000000000001], [38, 49, 0.10000000000000001], [38, 62, 0.47999999999999998], [38, 63, 0.080000000000000002], [40, 46, 0.1641], [40, 48, 0.11], [40, 49, 0.076700000000000004], [40, 51, 0.0015], [40, 62, 0.47999999999999998], [40, 63, 0.080000000000000002], [41, 46, 0.17999999999999999], [41, 48, 0.105], [41, 49, 0.089999999999999997], [41, 62, 0.47999999999999998], [41, 63, 0.080000000000000002], [46, 47, -0.011900000000000001], [46, 48, 0.030700000000000002], [46, 49, -0.017000000000000001], [46, 50, 0.1767], [46, 51, 0.080000000000000002], [46, 62, 0.50800000000000001], [46, 63, 0.21929999999999999], [46, 98, -0.0025999999999999999], [47, 98, 0.0104], [48, 49, -0.029999999999999999], [48, 50, 0.054399999999999997], [48, 62, 0.10000000000000001], [49, 50, 0.0974], [49, 62, 0.12], [50, 62, 0.040000000000000001], [62, 63, -0.25890000000000002], [63, 98, -0.17999999999999999], [2, 117, 0.20000000000000001], [3, 117, 0.02], [4, 117, 0.029999999999999999], [5, 117, 0.050000000000000003], [6, 117, 0.050000000000000003], [7, 117, 0.10000000000000001], [8, 117, 0.10000000000000001], [10, 117, 0.14999999999999999], [11, 117, 0.14999999999999999], [12, 117, 0.14999999999999999], [13, 117, 0.14999999999999999], [14, 117, 0.14999999999999999], [15, 117, 0.14999999999999999], [16, 117, 0.14999999999999999], [17, 117, 0.14999999999999999], [18, 117, 0.14999999999999999], [19, 117, 0.14999999999999999], [20, 117, 0.14999999999999999], [21, 117, 0.14999999999999999], [38, 117, 0.20000000000000001], [40, 117, 0.20000000000000001], [41, 117, 0.20000000000000001], [46, 117, 0.5], [49, 117, -0.20000000000000001], [62, 117, -0.080000000000000002]]

bwrs = [[1, 2, 0.17780000000000001], [1, 3, 0.35439999999999999], [1, 4, 0.16109999999999999], [1, 6, -0.11890000000000001], [1, 10, -0.040399999999999998], [1, 11, -0.23000000000000001], [1, 22, 0.14999999999999999], [1, 23, 0.17999999999999999], [1, 41, -0.050000000000000003], [1, 46, 0.1119], [1, 49, 0.027799999999999998], [2, 3, 0.0092999999999999992], [2, 4, 0.0144], [2, 5, -0.0022000000000000001], [2, 6, 0.023300000000000001], [2, 7, -0.028899999999999999], [2, 8, 0.0080999999999999996], [2, 10, 0.076399999999999996], [2, 11, 0.0167], [2, 12, 0.080699999999999994], [2, 13, 0.087800000000000003], [2, 23, 0.036999999999999998], [2, 38, 0.058500000000000003], [2, 40, 0.041099999999999998], [2, 41, 0.055599999999999997], [2, 43, -0.0088999999999999999], [2, 46, 0.0167], [2, 48, 0.015900000000000001], [2, 49, 0.01], [2, 51, 0.13639999999999999], [2, 65, 0.0141], [2, 98, 0.0080999999999999996], [3, 4, -0.0011999999999999999], [3, 5, -0.0022000000000000001], [3, 6, 0.0011000000000000001], [3, 10, -0.0088999999999999999], [3, 11, -0.015599999999999999], [3, 12, 0.0085000000000000006], [3, 14, -0.021100000000000001], [3, 22, 0.0030000000000000001], [3, 23, 0.0030000000000000001], [3, 38, 0.02], [3, 40, 0.021100000000000001], [3, 46, 0.093299999999999994], [3, 48, 0.029999999999999999], [3, 49, 0.0252], [3, 50, 0.024299999999999999], [4, 5, 0.0015], [4, 6, -0.00069999999999999999], [4, 7, 0.0033], [4, 8, 0.0041000000000000003], [4, 10, -0.0058999999999999999], [4, 11, -0.0068999999999999999], [4, 14, -0.0111], [4, 23, 0.0023], [4, 40, 0.011900000000000001], [4, 46, 0.1033], [4, 48, 0.089999999999999997], [4, 49, 0.0258], [4, 50, 0.021100000000000001], [5, 6, 0.0016999999999999999], [5, 23, -0.0011000000000000001], [5, 46, 0.12740000000000001], [5, 49, 0.0378], [5, 50, 0.0146], [6, 8, 0.0048999999999999998], [6, 10, -0.0033999999999999998], [6, 11, -0.0027000000000000001], [6, 14, -0.0063], [6, 22, 0.021999999999999999], [6, 24, 0.0014], [6, 28, 0.0035000000000000001], [6, 46, 0.029999999999999999], [6, 49, 0.044600000000000001], [7, 8, 0.0067000000000000002], [7, 46, 0.13669999999999999], [7, 49, 0.046300000000000001], [8, 12, -0.00040000000000000002], [8, 38, 0.0025000000000000001], [8, 40, 0.0054000000000000003], [8, 46, 0.13669999999999999], [8, 49, 0.040000000000000001], [8, 50, 0.0167], [10, 11, -0.00050000000000000001], [10, 38, 0.00050000000000000001], [10, 40, 0.0033], [10, 46, 0.17999999999999999], [10, 49, 0.047800000000000002], [11, 22, -0.0022000000000000001], [11, 40, 0.0011999999999999999], [11, 41, 0.25519999999999998], [11, 49, 0.036999999999999998], [12, 40, 0.00050000000000000001], [12, 46, -0.050000000000000003], [14, 22, 0.026700000000000002], [14, 46, 0.25640000000000002], [14, 49, 0.052200000000000003], [14, 50, 0.0001], [22, 40, 0.027], [22, 46, 0.066400000000000001], [22, 65, 0.0152], [23, 24, 0.00089999999999999998], [23, 46, 0.073300000000000004], [23, 49, 0.0189], [23, 65, -0.11], [24, 28, 0.0015], [24, 49, 0.021100000000000001], [38, 49, 0.026700000000000002], [40, 46, 0.24929999999999999], [40, 49, 0.045199999999999997], [40, 51, 0.0023], [40, 82, 0.0025000000000000001], [41, 49, 0.058900000000000001], [46, 47, 0.00059999999999999995], [46, 48, 0.0055999999999999999], [46, 49, 0.0030000000000000001], [46, 50, -0.080399999999999999], [46, 51, 0.1696], [46, 63, -0.050000000000000003], [46, 98, 0.0019], [47, 98, 0.0019], [48, 50, 0.14480000000000001], [49, 50, 0.021499999999999998], [49, 62, -0.0574], [49, 65, 0.0104], [50, 62, 0.086400000000000005], [62, 63, -0.031099999999999999], [63, 98, -0.080000000000000002], [1, 191, 0.55000000000000004], [2, 110, 0.0085000000000000006], [2, 191, 0.25], [3, 117, 0.061199999999999997], [3, 140, 0.056599999999999998], [3, 142, 0.050000000000000003], [3, 162, 0.0064000000000000003], [4, 134, -0.0033], [10, 145, 0.013299999999999999], [38, 126, 0.012], [46, 110, 0.0441], [46, 117, 0.35410000000000003], [47, 110, 0.028500000000000001], [49, 110, -0.0037000000000000002], [49, 117, 0.045900000000000003], [49, 142, -0.0067000000000000002], [49, 162, 0.022200000000000001], [62, 117, -0.0058999999999999999], [2, 219, 0.0111], [4, 219, -0.0028], [41, 230, -0.0011000000000000001], [46, 216, 0.10000000000000001], [49, 216, 0.015900000000000001], [1, 376, 0.15110000000000001], [2, 346, 0.029999999999999999], [2, 376, 0.01], [10, 313, 0.0144], [10, 319, 0.0067999999999999996], [11, 304, 0.0083000000000000001], [38, 325, 0.0033], [38, 327, 0.0117], [39, 319, 0.0089999999999999993], [40, 319, -0.0019], [41, 319, -0.00059999999999999995], [52, 313, 0.015800000000000002], [53, 313, 0.0149], [54, 313, 0.016799999999999999], [55, 313, 0.015299999999999999], [2, 406, 0.012999999999999999], [10, 499, 0.014200000000000001], [49, 645, 0.0043], [1, 842, 0.064100000000000004], [1, 888, -0.029999999999999999], [47, 971, 0.0063], [126, 325, 0.0061999999999999998], [215, 216, 0.0111], [216, 220, 0.0077999999999999996], [220, 229, 0.015100000000000001], [215, 643, 0.012], [218, 643, 0.0264], [230, 642, 0.0055999999999999999]]


def Kij(self, T=0, EOS=None):
    """Calculate binary interaction matrix for component of mixture,
    use bip data from dat/bip directory
    Parameter:
        T: opcional temperatura for generalized method
        EOS: name of equation of state, bwrs, nrtl, pr, srk, uniq, wils
    API procedure 8D1.1 pag 819, equations pag 827"""
    # TODO: import data here from file and remove lib/bip
    if EOS:
        kij = []
        for i in self.ids:
            kijk = []
            for j in self.ids:
                if i == j:
                    kijk.append(0)
                else:
                    for indice in EOS:
                        if i in indice[0:2] and j in indice[0:2]:
                            kijk.append(indice[2])
                            break
                    else:
                        if i == 1 or j == 1:
                            kijk.append(1/(344.23*exp(-0.48586*T/databank.base_datos[1][3])+1))
                        elif i == 2 or j == 2:
                            kijk.append(0.014*(abs(self.componente[self.ids.index(i)].SolubilityParameter-self.componente[self.ids.index(j)].SolubilityParameter)))
                        elif i == 46 or j == 46:
                            kijk.append(0.0403*(abs(self.componente[self.ids.index(i)].SolubilityParameter-self.componente[self.ids.index(j)].SolubilityParameter)))
                        elif i == 48 or j == 48:
                            kijk.append(0)
                        elif i == 49 or j == 49:
                            kijk.append(0.1)
                        elif i == 50 or j == 50:
                            kijk.append(0.0316*(abs(self.componente[self.ids.index(i)].SolubilityParameter-self.componente[self.ids.index(j)].SolubilityParameter)))
                        else:
                            kijk.append(0)
            kij.append(kijk)
    else:
        kij = zeros((len(self.ids), len(self.ids)))
    return kij

# mixing = [self.Mix_van_der_Waals, self.Mix_Stryjek_Vera,
          # self.Mix_Panagiotopoulos, self.Mix_Melhem]
# conf = config.getMainWindowConfig().getint("Thermo", "Mixing")
# self.Mixing_Rule = mixing[conf]



# Mixing Rules
def Mix_van_der_Waals(self, parameters, kij):
    """Miwing rules of van der Waals"""
    ai = parameters[0]
    bi = parameters[1:]
    b = [0]*len(bi)
    a = 0
    for i in range(len(self.componente)):
        for j in range(len(bi)):
            b[j] += self.fraccion[i]*bi[j][i]
            for j in range(len(self.componente)):
                a += self.fraccion[i]*self.fraccion[j]*(ai[i]*ai[j])**0.5*(1-kij[i][j])
        return tuple([a]+b)

def Mix_Stryjek_Vera(self, parameters, kij):
    """Mixing rules of Stryjek and Vera (1986)"""
    ai = parameters[0]
    bi = parameters[1:]
    b = [0]*len(bi)
    a = 0
    for i in range(len(self.componente)):
        for j in range(len(bi)):
            b[j] += self.fraccion[i]*bi[j][i]
        for j in range(len(self.componente)):
            if kij[i][j] == 0 and kij[j][i] == 0:
                k = 0.
            else:
                k = kij[i][j]*kij[j][i]/(self.fraccion[i]*kij[i][j]+self.fraccion[j]*kij[j][i])
            a += self.fraccion[i]*self.fraccion[j]*(ai[i]*ai[j])**0.5*(1-k)
    return tuple([a]+b)

def Mix_Panagiotopoulos(self, parameters, kij):
    """Mixing Rules of Panagiotopoulos (1985)"""
    ai = parameters[0]
    bi = parameters[1:]
    b = [0]*len(bi)
    a = 0
    for i in range(len(self.componente)):
        for j in range(len(bi)):
            b[j] += self.fraccion[i]*bi[j][i]
        for j in range(len(self.componente)):
            a += self.fraccion[i]*self.fraccion[j]*(ai[i]*ai[j])**0.5*(1-kij[i][j]+(kij[i][j]-kij[j][i])*self.fraccion[i])
    return tuple([a]+b)

def Mix_Melhem(self, parameters, kij):
    """Mixing Rules of Melhem (1991)"""
    ai = parameters[0]
    bi = parameters[1:]
    b = [0]*len(bi)
    a = 0
    for i in range(len(self.componente)):
        for j in range(len(bi)):
            b[j] += self.fraccion[i]*bi[j][i]
        for j in range(len(self.componente)):
            a += self.fraccion[i]*self.fraccion[j]*(ai[i]*ai[j])**0.5*(1-kij[i][j]+(kij[i][j]-kij[j][i])*self.fraccion[i]/(self.fraccion[i]+self.fraccion[j]))
    return tuple([a]+b)


